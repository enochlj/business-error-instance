开发人员使用并发工具来解决线程安全问题时容易犯的四类错:

一是，只知道使用并发工具，但并不清楚当前线程的来龙去脉，解决多线程问题却不了解线
程。比如，使用 ThreadLocal 来缓存数据，以为 ThreadLocal 在线程之间做了隔离不会有
线程安全问题，没想到线程重用导致数据串了。请务必记得，在业务逻辑结束之前清理
ThreadLocal 中的数据。

二是，误以为使用了并发工具就可以解决一切线程安全问题，期望通过把线程不安全的类替
换为线程安全的类来一键解决问题。比如，认为使用了 ConcurrentHashMap 就可以解决
线程安全问题，没对复合逻辑加锁导致业务逻辑错误。如果你希望在一整段业务逻辑中，对
容器的操作都保持整体一致性的话，需要加锁处理。

三是，没有充分了解并发工具的特性，还是按照老方式使用新工具导致无法发挥其性能。比
如，使用了 ConcurrentHashMap，但没有充分利用其提供的基于 CAS 安全的方法，还是
使用锁的方式来实现逻辑。你可以阅读一下ConcurrentHashMap 的文档，看一下相关
原子性操作 API 是否可以满足业务需求，如果可以则优先考虑使用。

四是，没有了解清楚工具的适用场景，在不合适的场景下使用了错误的工具导致性能更差。
比如，没有理解 CopyOnWriteArrayList 的适用场景，把它用在了读写均衡或者大量写操
作的场景下，导致性能问题。对于这种场景，你可以考虑是用普通的 List。